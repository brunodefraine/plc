plc, A compiled approach for Prolog

DESCRIPTION

plc is a proof-of-concept Prolog compiler that translates regular Prolog programs to standalone, native-code executables. It is able to achieve significantly better performance than conventional Prolog implementations, typically at least 4-5x faster than Sicstus and 10-20x faster than SWI Prolog. It was nonetheless a rather limited effort to develop.

plc currently supports a very reasonable set of Prolog features:
- Core features: predicates, variables and atoms; backtracking and unification
- Compound terms (functors)
- Syntactic sugar to parse/print lists to/from compound terms
- Unify (=) and failure-to-unify (\=)
- Integers, arithmetic (is, +, -) and relations (=:=, =\=, <, >, =<, >=)
- Negation as failure (not)
- Cut (!)
- Built-in predicates: true, fail, repeat, write, nl

There are three important aspects about the approach taken by plc:

1. plc is developed as a front-end for the OCaml compiler; it was itself written in OCaml using the camlp4 macro system. This point is pragmatic, but it is perhaps the most important enabler. plc can take advantage of OCaml's existing high-performance native-code compiler (which supports most common architectures), and since it translates Prolog to a high-level functional language, a number of things come "for free", most notably garbage collection and tail-call optimization. Thanks to the integration with camlp4, semantics errors encountered by the OCaml compiler can be reported using their original source code positions.

2. plc encodes Prolog's goal solving process as a depth-first search using continuation-passing style. This means that every predicate is implemented as a higher-order function that calls a given argument function with every encountered solution (in case there are no solutions, the argument function is never called). As such, the argument function represents a continuation for every encountered solution, and backtracking occurs implicitly, when the continuation is not called. A disjunction of two predicates is translated to the sequence of first calling the first predicate's function and then the second predicate's function, while a conjunction is translated to a call to the first predicate's function with the second predicate's function as a part of the continuation argument. To stop at the first solution or to "cut" the consideration of backtracking alternatives, an exception is raised.

3. plc precompiles different predicates versions according to the possible state (open/closed respectively uninstantiated/instantiated respectively free/ground respectively out/in) of each argument. So there are in fact a number of higher-order functions that implement different versions of the same predicate. [Mercury apparently employs a very similar technique when it considers different "modes" for a predicate.] These functions have different signatures and each version is written with knowledge of each variable's state, so it can in turn call the specific versions of its subgoals, according to the state of the arguments. As such, variables are excluded as first-class values. This is perhaps the most debatable design choice: while most programs do not require first-class variables and benefit from this optimization, some Prolog idioms rely on this feature (e.g. open/difference lists).

DOWNLOAD / USAGE

plc requires OCaml 3.10.0 or higher (previous versions of OCaml will not work for accidental reasons).

The plc code is available at the following URL. Use WebDAV or Subversion to download all files at once.

http://ssel.vub.ac.be/svn-gen/bdefrain/plc/trunk/

A Makefile is included for Unix platforms. Building plc is done through "make plc.opt". To get started, look at "demo.pl" and try "make demo" (this will use the bytecode compiler). You can also look at "nqueens.cpp" and try "make nqueens.opt" for an example that uses the native-code compiler. To see the generated Ocaml code, execute "make <basename>.output".

PERFORMANCE

To evaluate the performance of plc-compiled programs, I conducted a benchmark with a typical Prolog version of nqueens (what else) on a Debian/Linux (etch) machine with an Intel Pentium 4 (2.66GHz) processor and 1G RAM. plc employed OCaml 3.10.0, the other contenders were:
- SWI-Prolog version 5.6.14 for i386 (from Debian unstable)
- Ciao-Prolog 1.10 (ciaoc producing a standalone executable)
- SICStus 4.0.1 (x86-linux-glibc2.3)
- YAP version Yap-5.1.1
- Mercury, version 0.13.1, configured for i686-pc-linux-gnu (default low-level C backend)

I included Mercury after a suggestion by Markus Triska. Although the Mercury language is neither a subset nor a superset of Prolog, it's possible to convert most Prolog code to Mercury with minimal effort (see "nqueens.cpp" and "nqueens_mercury.m" to see exactly how much effort). Moreover, Mercury is a valid reference point since it seems to apply similar optimizations (and more), and it is situated in the same area of integrating ideas from logic programming and (statically-typed) functional programming. (Note that I had no prior experience with Mercury so I hope my adaptations are representative.)

Each approach was used to solve the nqueens problem of size 12, six times in a row. Mercury and plc started with a compiled binary, while swipl and sicstus started from the original source file. This hardly has an influence however, since the compilation cost is very small (about 0.25s for plc and 0.75s for Mercury to produce a binary that can solve nqueens for any n), and swipl and sicstus compile faster anyway (both report 0 msec), so it is doubtful they would have benefited from loading some intermediate code file anyway. Naturally, all approaches produce the same solutions in the same order, as required by the Prolog semantics (I do not know if the Mercury semantics guarantees order, but it was the same as Prolog's). Below are the averages and standard deviation of the sample of 6 runs.

             execution time   speedup over swipl
                avg  stddev          avg  stddev
swipl       8457.46  177.32         1.00    0.02
ciaoc       1585.30   42.82         5.34    0.14
sicstus     1368.21   42.95         6.19    0.19
yap          715.81    7.46        11.82    0.12
mercury      270.76   25.81        31.49    3.19
plc          281.45    0.78        30.05    0.08

The results show that plc and Mercury clearly outperform SWI Prolog and Sicstus for this problem. The comparison between plc and Mercury is interesting: although Mercury is 11s faster on average, its performance is less consistent, as indicated by the high stddev. (In fact, the Mercury times are negatively skewed, and plc is a little faster when the medians are compared instead of averages.) It is unclear where this variation comes from. The Mercury binary also seems relatively large for such a small program (1.8M versus 104K for plc, both after strip-ping), perhaps this is related.

Despite these issues, the Mercury approach seems promising, especially because of the availability of other backends (which I did not try). The main difference with (current) plc is the static typing of terms, whereas plc only employs one general term type to match Prolog semantics (i.e. the goal "foo is 1+1" is valid, but always fails). Consequently, plc intends to run Prolog programs without modification, whereas Mercury is essentially a new language. Nevertheless, applying a typing discipline such as Mercury's might be beneficial for more than just performance. In absence of that, plc seems to provide some interesting middle ground. 
